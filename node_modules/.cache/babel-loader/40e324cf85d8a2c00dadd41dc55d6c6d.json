{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\n\nvar dataFetchReducer = function dataFetchReducer(state, action) {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return _objectSpread({}, state, {\n        isLoading: true,\n        isError: false\n      });\n\n    case \"FETCH_SUCCESS\":\n      return _objectSpread({}, state, {\n        isLoading: false,\n        hasErrored: false,\n        errorMessage: \"\",\n        data: action.payload\n      });\n\n    case \"FETCH_FAILURE\":\n      return _objectSpread({}, state, {\n        isLoading: false,\n        hasErrored: true,\n        errorMessage: \"Data Retrieve Failure\"\n      });\n\n    case \"REPLACE_DATA\":\n      // The record passed (state.data) must have the attribute \"id\"\n      var newData = state.data.map(function (rec) {\n        return rec.id === action.replacerecord.id ? action.replacerecord : rec;\n      });\n      return _objectSpread({}, state, {\n        isLoading: false,\n        hasErrored: false,\n        errorMessage: \"\",\n        data: newData\n      });\n\n    default:\n      throw new Error();\n  }\n};\n\nvar useAxiosFetch = function useAxiosFetch(initialUrl, initialData) {\n  var _useState = useState(initialUrl),\n      _useState2 = _slicedToArray(_useState, 1),\n      url = _useState2[0];\n\n  var _useReducer = useReducer(dataFetchReducer, {\n    isLoading: false,\n    hasErrored: false,\n    errorMessage: \"\",\n    data: initialData\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  useEffect(function () {\n    var didCancel = false;\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: \"FETCH_INIT\"\n                });\n                _context.prev = 1;\n                _context.next = 4;\n                return axios.get(url);\n\n              case 4:\n                result = _context.sent;\n\n                if (!didCancel) {\n                  dispatch({\n                    type: \"FETCH_SUCCESS\",\n                    payload: result.data\n                  });\n                }\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n\n                if (!didCancel) {\n                  dispatch({\n                    type: \"FETCH_FAILURE\"\n                  });\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 8]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n    return function () {\n      didCancel = true;\n    };\n  }, [url]);\n\n  var updateDataRecord = function updateDataRecord(record) {\n    dispatch({\n      type: \"REPLACE_DATA\",\n      replacerecord: record\n    });\n  };\n\n  return _objectSpread({}, state, {\n    updateDataRecord: updateDataRecord\n  });\n};\n\nexport default useAxiosFetch;","map":{"version":3,"sources":["/Users/satyabrat/React_Projects/PluralSight_Prac/Conference_Site/src/useAxiosFetch.js"],"names":["React","useState","useEffect","useReducer","axios","dataFetchReducer","state","action","type","isLoading","isError","hasErrored","errorMessage","data","payload","newData","map","rec","id","replacerecord","Error","useAxiosFetch","initialUrl","initialData","url","dispatch","didCancel","fetchData","get","result","updateDataRecord","record"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return { ...state, isLoading: true, isError: false };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        hasErrored: false,\n        errorMessage: \"\",\n        data: action.payload,\n      };\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        hasErrored: true,\n        errorMessage: \"Data Retrieve Failure\",\n      };\n    case \"REPLACE_DATA\":\n      // The record passed (state.data) must have the attribute \"id\"\n      const newData = state.data.map((rec) => {\n        return rec.id === action.replacerecord.id ? action.replacerecord : rec;\n      });\n      return {\n        ...state,\n        isLoading: false,\n        hasErrored: false,\n        errorMessage: \"\",\n        data: newData,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst useAxiosFetch = (initialUrl, initialData) => {\n  const [url] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    hasErrored: false,\n    errorMessage: \"\",\n    data: initialData,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\" });\n\n      try {\n        let result = await axios.get(url);\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_FAILURE\" });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const updateDataRecord = (record) => {\n    dispatch({\n      type: \"REPLACE_DATA\",\n      replacerecord: record,\n    });\n  };\n\n  return { ...state, updateDataRecord };\n};\n\nexport default useAxiosFetch;\n"]},"metadata":{},"sourceType":"module"}